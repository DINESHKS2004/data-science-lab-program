import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Step 1: Load the dataset
try:
    df = pd.read_csv("ecommerce_transactions.csv")  # Replace with your filename
except FileNotFoundError:
    print("‚ùå Error: 'ecommerce_transactions.csv' not found.")
    exit()

# Step 2: Preview and check required columns
print("üìä Data Preview:")
print(df.head())

required_columns = ['customer_id', 'amount_spent', 'items_purchased']
if not all(col in df.columns for col in required_columns):
    print(f"‚ùå Error: Dataset must contain {required_columns}")
    exit()

# Step 3: Aggregate data by customer
customer_df = df.groupby("customer_id").agg({
    'amount_spent': 'sum',
    'items_purchased': 'sum'
}).reset_index()

# Step 4: Feature scaling
scaler = StandardScaler()
X_scaled = scaler.fit_transform(customer_df[['amount_spent', 'items_purchased']])

# Step 5: Use Elbow Method to determine optimal k
wcss = []
for k in range(1, 11):
    km = KMeans(n_clusters=k, random_state=42)
    km.fit(X_scaled)
    wcss.append(km.inertia_)

# Plot the Elbow Curve
plt.figure(figsize=(8, 4))
plt.plot(range(1, 11), wcss, marker='o')
plt.title("Elbow Method to Find Optimal k")
plt.xlabel("Number of Clusters (k)")
plt.ylabel("WCSS")
plt.grid(True)
plt.tight_layout()
plt.show()

# Step 6: Choose optimal k based on elbow plot
k = int(input("Enter the optimal number of clusters (k): "))
kmeans = KMeans(n_clusters=k, random_state=42)
customer_df['Cluster'] = kmeans.fit_predict(X_scaled)

# Step 7: Visualize clusters
plt.figure(figsize=(8, 6))
sns.scatterplot(
    data=customer_df,
    x='amount_spent',
    y='items_purchased',
    hue='Cluster',
    palette='Set2',
    s=100,
    alpha=0.8
)
plt.title("Customer Segmentation Based on Spending and Items Purchased")
plt.xlabel("Total Amount Spent")
plt.ylabel("Total Items Purchased")
plt.grid(True)
plt.legend(title='Cluster')
plt.tight_layout()
plt.show()

# Step 8: Save segmented data
customer_df.to_csv("customer_segments.csv", index=False)
print("\n‚úÖ Segmented customer data saved to 'customer_segments.csv'")
