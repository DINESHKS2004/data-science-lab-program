import pandas as pd
import numpy as np
from scipy import stats

# Load data
try:
    data = pd.read_csv("rare_elements.csv")
except FileNotFoundError:
    print("Error: 'rare_elements.csv' not found.")
    exit()

# Assuming the CSV has a single column with no header
if data.shape[1] != 1:
    print("Error: CSV must contain a single column of concentration values.")
    exit()

# Rename the column for clarity
data.columns = ['concentration']

# Ask user for inputs
sample_size = int(input("Enter the sample size (e.g., 30): "))
confidence_level = float(input("Enter the confidence level (e.g., 95 for 95%): "))
desired_precision = float(input("Enter the desired precision (margin of error): "))

# Draw random sample from the data
sample = data['concentration'].sample(n=sample_size, random_state=1)

# Calculate sample statistics
sample_mean = np.mean(sample)
sample_std = np.std(sample, ddof=1)
alpha = 1 - (confidence_level / 100)

# Calculate t-score
t_score = stats.t.ppf(1 - alpha/2, df=sample_size - 1)

# Calculate margin of error
margin_of_error = t_score * (sample_std / np.sqrt(sample_size))

# Confidence Interval
lower_bound = sample_mean - margin_of_error
upper_bound = sample_mean + margin_of_error

# Output
print(f"\nSample Mean: {sample_mean:.4f}")
print(f"{confidence_level:.0f}% Confidence Interval for the Population Mean: ({lower_bound:.4f}, {upper_bound:.4f})")
print(f"Margin of Error: ±{margin_of_error:.4f}")

# Precision check
if margin_of_error <= desired_precision:
    print("✅ The desired level of precision is achieved.")
else:
    print("❌ The desired level of precision is NOT achieved. Consider increasing the sample size.")
